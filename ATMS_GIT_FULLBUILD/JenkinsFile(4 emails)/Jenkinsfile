#!groovy

// Builds ATMS code with both Groovy (for core code) and ANT (for installation packages)
pipeline {
	// Test env
	environment {
		EMAIL_TO = 'Delena.McFaddenMello@gdit.com,Oghenekevwe.Oberiko@gdit.com,Saqib.Bhuiyan@gdit.com, Paul.Nde@gdit.com'
		EMAIL_ERRORS = 'Delena.McFaddenMello@gdit.com,Oghenekevwe.Oberiko@gdit.com,Saqib.Bhuiyan@gdit.com, Paul.Nde@gdit.com'
		}

    agent any

	    //tools {
    
        // Install Gradle and add it to the path.
        //gradle 'Gradle-7.3.3'
      
        // Install Ant and add it to the path.
        //ant 'ANT1.9.6'
        
        // Install JAVA JDK and add it to the path.
        //jdk 'JDK15.0.2'
      
        //}

    stages {
        stage('Checkout'){
			steps {
				//Checkout chart-atms target version
				echo 'Getting Latest Code...'
				checkout scm
				
				//Checkout and Sparce the CM Jenkins ATMS Scripts from chart-cm to a specific directory(CM_Scripts) within the ATMS workspace
				echo 'Checkout CM Scripts for ATMS'
				checkout poll: false, 
					scm: [$class: 'GitSCM', 
					branches: [[name: '*/main']], 
					extensions: [[$class: 'SparseCheckoutPaths', 
					sparseCheckoutPaths: [[path: 'Jenkins/ATMS_Scripts/']]], 
					[$class: 'RelativeTargetDirectory', relativeTargetDir: 'CM_Scripts']], 
					userRemoteConfigs: [[credentialsId: 'e5c83089-b4d5-4ad9-ac85-4772980de4be', 
					url: 'git@chartgitlab.chartdev.net:chartcm/cm.git']]]
				
				//Checkout and Sparce the CM chocolatey chart-atms from chart-cm to a specific directory (CM_Package) within the ATMS workspace 	
				echo 'Checkout CM Package for chart-atms'
				checkout poll: false, 
					scm: [$class: 'GitSCM', 
					branches: [[name: '*/main']], 
					extensions: [[$class: 'RelativeTargetDirectory', 
					relativeTargetDir: 'CM_Package'], 
					[$class: 'SparseCheckoutPaths', 
					sparseCheckoutPaths: [[path: 'chocolatey/chart-atms']]]], 
					userRemoteConfigs: [[credentialsId: 'e5c83089-b4d5-4ad9-ac85-4772980de4be', 
					url: 'git@chartgitlab.chartdev.net:chartcm/cm.git']]]
				}
        }

		stage('Copy CM Files') {
			steps {				
				//Copy CM Scripts to root directory
              	powershell returnStatus: true, script: "Copy-Item -Force -Recurse -Verbose '${env.WORKSPACE}//CM_Scripts//Jenkins//ATMS_Scripts//*' -Destination '${env.WORKSPACE}/CM_Scripts'"

             	// Copy CM_Package to root directory
              	powershell returnStatus: true, script: "Copy-Item -Force -Recurse -Verbose '${env.WORKSPACE}//CM_Package/chocolatey//chart-atms//*' -Destination '${env.WORKSPACE}/CM_Package'"				
				}
			}

		stage('Remove unnecessary CM Files') {
			steps {
			  echo 'Removing unnecessary files...'
			  powershell returnStatus: true, script: "Remove-Item '${env.WORKSPACE}//CM_Scripts//Jenkins' -Recurse -Force -Verbose"
        	  powershell returnStatus: true, script: "Remove-Item '${env.WORKSPACE}//CM_Package//chocolatey' -Force -Recurse -Verbose"
				}
			}

		stage('Check JIRA') {
			steps {
				echo 'Checking JIRA for ATMS tickets ready for deploy...'
				withCredentials([usernamePassword(credentialsId: 'cmadminJIRA', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
					powershell returnStatus: true, script: ".\\CM_Scripts\\checkJIRAIssues.ps1 -GIT_BRANCH ${env.GIT_BRAN} -GIT_DIR ${env.WORKSPACE} -cmadminUSER ${env.USER} -cmadminPASS ${env.PASS}"
					}
				
				// Use a script block to read variable set in the completed.array file
				script {
					def props = readProperties file: 'completed.array'
					env.COMPLETED_ITEMS = props.COMPLETED_ITEMS
					}

				catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {

					script {
						if (env.COMPLETED_ITEMS) {
							echo "Completed issues found"
							bat "EXIT 0"
							} else {
								echo "No completed issues found"
								bat "EXIT 1"
								}
						}
					
					}
					
				}
			}
           stage('Create Tag') {
			when {
                expression {
                    env.COMPLETED_ITEMS
					}
				}
			
			steps {
				powershell returnStatus: true, script: ".\\CM_Scripts\\createTag.ps1 -COMPLETED_ITEMS '${env.COMPLETED_ITEMS}' -GIT_BRANCH ${env.GIT_BRAN} -GIT_DIR ${env.WORKSPACE}"
				
				script {
					def props = readProperties file: 'new.tag'
					env.TAG_NAME = props.TAG_NAME
					}
				
				script {
					def props = readProperties file: 'tag.ver'
					env.TAG_VER = props.TAG_VER
					}
				}
			}

			stage('Code Build') {
		
			when {
                expression {
                    env.COMPLETED_ITEMS
					}
				}
			
			tools {
				// Install Gradle and add it to the path.
				gradle 'Gradle-7.3.3'
		
				// Install JAVA JDK and add it to the path.
				jdk 'JDK15.0.2'
				}
				
			steps {
				echo 'Building Code With Gradle...'
				bat "gradle build -PatmsVersion=${TAG_VER}"
				}
				
			}

		   stage('Install Package Build') {

			when {
                expression {
                    env.COMPLETED_ITEMS
					env.TAG_VER
					}
				}
			
			tools {
				// Install Gradle and add it to the path.
				gradle 'Gradle-7.3.3'
		
				// Install JAVA JDK and add it to the path.
				jdk 'JDK15.0.2'
				}
				
			steps {
				powershell returnStatus: true, script: "Remove-Item ./install/output -Force -Recurse"
				echo 'Building Install Packages With Gradle...'
				bat "gradle :gradleproj:install:templates -PatmsVersion=${TAG_VER}"
				}
			}


			stage('Build Package') {
			
			when {
                expression {
                    env.COMPLETED_ITEMS
					}
				}
			
			steps {
				echo 'Building ATMS Package File into the Chocolatey Repo...'
				powershell returnStatus: true, script: ".\\CM_Scripts\\packageOutput.ps1 -buildWorkspace ${env.WORKSPACE} -CHART_APP atms -TAG_VER '${env.TAG_VER}'"				}
				
			}

			stage('Deploy Package') {
		
			when {
                expression {
                    env.COMPLETED_ITEMS
					}
				}
			
			steps {
				echo 'Deploying ATMS Package to test servers...'
				withCredentials([usernamePassword(credentialsId: 'f1721075-b281-4e2c-9174-69316feebd7d', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
					powershell returnStatus: true, script: ".\\CM_Scripts\\deployPackage.ps1 -TAG_VER ${env.TAG_VER} -TARGET_SERVER ${env.TARGET_SERVER} -USERNAME ${env.USER} -PASSWORD ${env.PASS}"
					}
					
				}
			}

		stage('Update JIRA') {
		
			when {
                expression {
                    env.COMPLETED_ITEMS
					}
				}
			
			steps {
				echo 'Updating JIRA tickets...'
				withCredentials([usernamePassword(credentialsId: 'cmadminJIRA', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
					powershell returnStatus: true, script: ".\\CM_Scripts\\updateJIRA.ps1 -TARGET_SERVER ${env.TARGET_SERVER} -cmadminUSER ${env.USER} -cmadminPASS ${env.PASS} -TAG_NAME ${env.TAG_VER} -COMPLETED_ITEMS '${env.COMPLETED_ITEMS}'"
					}

				script {
					def props = readProperties file: 'email.body'
					env.EMAIL_BODY = props.EMAIL_BODY
					}
				}
			}
    }
		post {
			success {
				emailext body: "${EMAIL_BODY}", 
					mimeType: 'text/html',
					to: "${EMAIL_TO}", 
					subject: "${TARGET_SERVER} Environment Updated: ATMS ${TAG_VER}"
				}
			failure {
				emailext body: 'Check console output at $BUILD_URL to view the results. \n\n ${CHANGES} \n\n -------------------------------------------------- \n${BUILD_LOG, maxLines=100, escapeHtml=false}', 
					to: "${EMAIL_ERRORS}", 
					subject: 'Build failed in Jenkins: $PROJECT_NAME - #$BUILD_NUMBER'
				}
			unstable {
				emailext body: 'Check console output at $BUILD_URL to view the results. \n\n ${CHANGES} \n\n -------------------------------------------------- \n${BUILD_LOG, maxLines=100, escapeHtml=false}', 
					to: "${EMAIL_ERRORS}", 
					subject: 'Unstable build in Jenkins: $PROJECT_NAME - #$BUILD_NUMBER'
				}
			}
}